structure {
    data = {
        "meta":{
            "kfd":(int milisecond delay for frames) 42, // 24 frames per second
            "mfd":(int milisecond delay for zero length frames) 0,
            "width":(int svg elem width) 1000,
            "height":(int svg elem height) 1000,
        },
        "css":[
            // css styles
        ],
        "frames":[
            // video frames
        ]
    }
}

css {
    format {
        [(str css selector), (str css rule)]
    }
}

frames {
    format {
        [(int frame type id), ...(other)]
    }
    frame type ids {
        0 : key frame,
        1 : update frame,
        2 : expand frame,
        3 : add frame,
        4 : toggle visibility,
        5 : wait,
        6 : parent,
        7 : unparent
    }
    key frame {
        clears all shapes and repopulates
        [0, {type:(str shape type), props:{(shape props)}, clname:(str css class name, optional), name:(str unique id, optional)}, ...(repeat)]
    }
    update frame {
        updates a shape's properties
        [1, {name:(str shape id), props:{(properties)}}]
    }
    expand frame {
        generates frames using the given information
        [2, {to:(int frame type id), paths:{(str prop path):[(array | int low), (array | int high), (int frame count)]}}, {(valid for target frame)}]
    }
    add frame {
        adds a new shape without clearing existing shapes
        [3, (valid key frame syntax)]
    }
    toggle visibility {
        toggles the visiblity of the given shapes
        [4, (str shape id), ...(repeat)]
    }
    wait {
        noop frame, performs no action
        [5, ...(anything can go here, all will be ignored)]
    }
    parent {
        parents a shape
        [6, [(str parent shape id), (str child shape id)]]
    }
    unparent {
        unparents a shape
        [7, [(str parent shape id), (str child shape id)]]
    }
}